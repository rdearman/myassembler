( [\] Partially complete [X] complete )

============ WORKING ON ============
[] complete functions for all instructions 
    [ ] Token::CCF
    [\] Token::PUSH(inner)
    [\] Token::POP(inner)
    [ ] Token::CMP(inner)
    [\] Token::LDR(inner)
    [\] Token::STR(inner)
[] way to separate program memory from storage memory (probably hardware not software)
[] ADD, MOV, SUB functions are very hacky and should be changed to more elegant solution since they are almost carobon copied.
[] Need validation rules, for example: for each POP there should have been a PUSH

============
[X] support the _data label. the underscore indicated variable name.
[X] import bytecode to generate instructions.
[X] first two bytecodes are always the same, make the constructor default: 
    load PC into MAR
    load MDR into IR
[X] define all descreet bytecodes for use in instructions. (bindgen)
[X] make small asm program which can be used to match simple machine code (Working program not a list of instructions)
[X] Do multiple passes? Need to define memory addresses for labels and data first. 
[X] support labels further down in file (may need 2 step lex, first for labels and data)
[X] Fix issue with opcodes in C program that loads bindings.rs (See Note)
    // /////////// ===========================================  //////////////////
    //  We have a problem here with the opcodes and need to adjust the C program 
    //  that loads the EEProms. To move a constant you need to have:
    //  Timer0/1 load and fetch
    //  Timer 2 load MAR with address of next memory location,
    //  Timer 3 assert MDR on to the databus and latch the register.
    // /////////// ===========================================  //////////////////